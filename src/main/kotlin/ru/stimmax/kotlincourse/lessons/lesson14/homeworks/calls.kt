package org.example.ru.stimmax.kotlincourse.lessons.lesson14.homeworks

import org.example.ru.stimmax.kotlincourse.lessons.lesson14.User

fun main() {
    val p1 = Party("McDonalds", 10)
    p1.details()

    val e1 = Emotion("angry", 20)
    e1.express()
    val e2 = Emotion("excited", 5)
    e2.express()

    Moon.showPhase()

    val pr1 = Product("apple", 2.99, 12)
    println(pr1)

    val c1 = Concert("Steklovata", "Luzhnkiki", 100, 100)
    c1.info()
    c1.buyTicket()
    c1.info()
    c1.buyTicket()


    // next calls generated by chatgpt - i was too lazy to generate tests
    // tests contained some errors, shortened comments are for the lines with errors - fixed

    val shelf1 = Shelf(10)
    println("Shelf 1 Capacity: ${shelf1.capacity}") // Accessing capacity for verification

    println("Add 'Book': ${shelf1.addItem("Book")}") // Should return true
    println("Add 'Notebook': ${shelf1.addItem("Notebook")}") // Should return false (exceeds capacity)
    println("Shelf 1 Items: ${shelf1.getItems()}") // Should be [Book]

    println("Can Accommodate 'Pen': ${shelf1.canAccomodate("Pen")}") // Should return true
    println("Can Accommodate 'Encyclopedia': ${shelf1.canAccomodate("Encyclopedia")}") // Should return false

    println("Contains 'Book': ${shelf1.containsItem("Book")}") // Should return true
    println("Contains 'Pencil': ${shelf1.containsItem("Pencil")}") // Should return false

    println("Remove 'Book': ${shelf1.removeItem("Book")}") // Should return true
    println("Remove 'Book': ${shelf1.removeItem("Book")}") // Trying to remove non-existent item - should return false
    println("Shelf 1 Items: ${shelf1.getItems()}") // Should be empty


    println("Add 'Apple': ${shelf1.addItem("Apple")}") // Add items back to test capacity
    println("Add 'Banana': ${shelf1.addItem("Pear")}")

    println("Shelf 1 Items: ${shelf1.getItems()}") // Should be [Apple, Pear]


    val shelf2 = Shelf(5)
    println("Add 'LongWord': ${shelf2.addItem("LongWord")}") // Test overflow directly


    // Rack Tests
    println("\n--- Rack Tests ---")

    val rack1 = Rack(3) // A rack with a maximum of 3 shelves

    println("Add Shelf 1: ${rack1.addShelf(Shelf(7))}") // Should return true
    println("Add Shelf 2: ${rack1.addShelf(Shelf(5))}") // Should return true
    println("Add Shelf 3: ${rack1.addShelf(Shelf(10))}") // Should return true
    println("Add Shelf 4: ${rack1.addShelf(Shelf(3))}") // Should return false (rack is full)


    println("Add 'Hammer': ${rack1.addItem("Hammer")}") // Add item to first available shelf (Shelf 1) - true
    println("Add 'Screwdriver': ${rack1.addItem("Screwdriver")}") // false
    println("Add 'Nails': ${rack1.addItem("Nails")}") // Add item to third available shelf (Shelf 2) - true


    rack1.printContents() // Display rack contents

    println("Contains 'Hammer': ${rack1.containsItem("Hammer")}") // Should return true
    println("Contains 'Saw': ${rack1.containsItem("Saw")}") // Should return false

    println("Remove 'Nails': ${rack1.removeItem("Nails")}") // Should return true
    println("Remove 'Nails': ${rack1.removeItem("Nails")}") // Try to remove again - false
    rack1.printContents() // Show rack contents after removal

    println("Add 'Nails': ${rack1.addItem("Nails")}") // Add item to third available shelf (Shelf 2) - true

    val removedShelfItems = rack1.removeShelf(1) // Remove shelf at index 1
    println("Removed Shelf Items: ${removedShelfItems}") // Should return the items of removed shelf, []

    rack1.printContents() //Display rack contents after removal

    val removedShelfItems2 = rack1.removeShelf(10) // Remove shelf at index 10 - should return empty list

    rack1.printContents() //Display rack contents after removal


    //Advanced Remove Shelf Test

    val rack2 = Rack(3)
    rack2.addShelf(Shelf(5))
    rack2.addShelf(Shelf(5))
    rack2.addShelf(Shelf(5))

    rack2.addItem("Item1")
    rack2.addItem("Item2")
    rack2.addItem("Item3")
    rack2.printContents()

    val unallocatedItems = rack2.advancedRemoveShelf(0)
    println("Unallocated items: ${unallocatedItems}")
    rack2.printContents()



    //Rack full test
    val rack3 = Rack(1)
    rack3.addShelf(Shelf(1))
    rack3.addItem("item1")
    rack3.addItem("item2")
    rack3.printContents()

}
